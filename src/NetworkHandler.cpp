#include "NetworkHandler.h"
#include "DisplayHandler.h"


AsyncWebServer server(80);
WiFiManager wifiManager;
ESPAsyncHTTPUpdateServer _updateServer;

const char* PARAM_AREA = "area";
const char* PARAM_THRESHOLD = "threshold";
const char* PARAM_TAX = "tax";

#define index_html_gz_len 1003
const uint8_t index_html_gz[] PROGMEM = {  
0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8D, 0x56, 0xDB, 0x6E, 0xE3, 0x36, 0x10, 0x7D, 0x2F, 0xD0, 0x7F, 0x98, 0x72, 0xB1, 0xC8, 0x05, 0x56, 0x64, 0xD9, 0xF1, 0xD6, 0x75, 0x24, 0xB7, 0x41, 0x9B, 0xA2, 0x7D, 0x28, 0xB2, 0x68, 0xD2, 0x87, 0xA2, 0xD8, 0x07, 0x4A, 0xA2, 0x25, 0x22, 0x14, 0xA9, 0x25, 0xE9, 0x4B, 0x1A, 0xF8, 0x6F, 0xD2, 0x5F, 0xE8, 0x0F, 0xE4, 0xC7, 0x3A, 0xD4, 0xCD, 0xB2, 0xE3, 0x0D, 0x0A, 0x5B, 0xB0, 0x34, 0xD7, 0x33, 0x67, 0x86, 0x23, 0x87, 0xDF, 0xFC, 0x74, 0xFB, 0xE3, 0xFD, 0x9F, 0x1F, 0x6F, 0x20, 0xB7, 0x85, 0x98, 0x7F, 0xFD, 0x55, 0xE8, 0x7E, 0x41, 0x50, 0x99, 0x45, 0xC4, 0xAC, 0xC8, 0x1C, 0x9C, 0x88, 0xD1, 0x14, 0x55, 0x00, 0x61, 0xC1, 0x2C, 0x85, 0x24, 0xA7, 0xDA, 0x30, 0x1B, 0x91, 0x3F, 0xEE, 0x7F, 0xF6, 0xA6, 0x95, 0x09, 0xAA, 0x2C, 0xB7, 0x82, 0xCD, 0x6F, 0x44, 0xCA, 0x4D, 0x29, 0xE8, 0x63, 0xE8, 0xD7, 0x02, 0xD8, 0xF9, 0x49, 0x5A, 0xB0, 0x88, 0xAC, 0x38, 0x5B, 0x97, 0x4A, 0x5B, 0x02, 0x89, 0x92, 0x96, 0x49, 0x8C, 0xB3, 0xE6, 0xA9, 0xCD, 0xA3, 0x94, 0xAD, 0x78, 0xC2, 0xBC, 0xEA, 0x61, 0x00, 0x5C, 0x72, 0xCB, 0xA9, 0xF0, 0x4C, 0x42, 0x05, 0x8B, 0x82, 0x8B, 0x21, 0xA9, 0x11, 0x18, 0xFB, 0x88, 0x51, 0xDD, 0x2D, 0x40, 0xAC, 0xD2, 0x47, 0x78, 0x82, 0x05, 0xC6, 0xF1, 0x16, 0xB4, 0xE0, 0xE2, 0x71, 0x06, 0xD7, 0x1A, 0xBD, 0x06, 0x60, 0xA8, 0x34, 0x9E, 0x61, 0x9A, 0x2F, 0xAE, 0x20, 0xA6, 0xC9, 0x43, 0xA6, 0xD5, 0x52, 0xA6, 0x5E, 0xA2, 0x84, 0xD2, 0x33, 0x78, 0xB7, 0xB8, 0xC4, 0xCF, 0x77, 0x57, 0x50, 0x50, 0x9D, 0x71, 0x39, 0x83, 0xE1, 0x15, 0x94, 0x34, 0x4D, 0xB9, 0xCC, 0x66, 
0x30, 0x1A, 0x96, 0x9B, 0x2B, 0xD8, 0xD6, 0x29, 0x2E, 0x16, 0x4A, 0x17, 0x98, 0xE3, 0x58, 0x8C, 0xC5, 0xE2, 0x95, 0x57, 0xAC, 0x74, 0xCA, 0xB4, 0xA7, 0x69, 0xCA, 0x97, 0x66, 0x06, 0x41, 0x23, 0xDC, 0x78, 0x26, 0xA7, 0xA9, 0x5A, 0x63, 0x22, 0x18, 0x95, 0x1B, 0x98, 0xE0, 0xA5, 0xB3, 0x98, 0x9E, 0x0E, 0x07, 0xD0, 0x7C, 0x2F, 0x82, 0x33, 0x07, 0x67, 0x53, 0xD7, 0x3F, 0x83, 0xCB, 0x61, 0xE5, 0xDB, 0x02, 0xA4, 0x4B, 0xAB, 0x3A, 0x50, 0x79, 0x80, 0x88, 0x2C, 0xDB, 0x58, 0x8F, 0x0A, 0x9E, 0xA1, 0x36, 0x41, 0x1A, 0x99, 0xBE, 0x82, 0x16, 0xDA, 0x78, 0x3C, 0xEE, 0x8C, 0x05, 0x8D, 0x99, 0x40, 0xFB, 0xA6, 0x2F, 0x33, 0x88, 0x85, 0x4A, 0x1E, 0xDA, 0xC8, 0x5E, 0xAC, 0xAC, 0x55, 0x45, 0x0B, 0xB5, 0xA2, 0x72, 0xCD, 0x78, 0x96, 0x5B, 0x34, 0x54, 0x22, 0xDD, 0xC5, 0x9C, 0x4C, 0x26, 0x5D, 0x4C, 0x2E, 0xCB, 0xA5, 0xFD, 0xCB, 0x3E, 0x96, 0x2C, 0x3A, 0x71, 0x38, 0x4E, 0x3E, 0x0D, 0xF6, 0x64, 0x72, 0x59, 0xC4, 0x4C, 0x9F, 0x7C, 0xC2, 0xB4, 0x4D, 0x39, 0xC1, 0x70, 0xF8, 0xBE, 0xC7, 0x56, 0xD0, 0x2B, 0xAE, 0x83, 0x70, 0x94, 0xC2, 0xC9, 0x4E, 0x86, 0x6E, 0xC8, 0x9B, 0x51, 0x82, 0xA7, 0xF0, 0x2E, 0x49, 0x92, 0xA3, 0x70, 0x92, 0x9C, 0x25, 0x0F, 0xC8, 0x78, 0x95, 0xBC, 0x49, 0xA0, 0xEB, 0x7A, 0x82, 0xBD, 0xC6, 0xC6, 0x4B, 0xCC, 0x2A, 0x3D, 0x37, 0x84, 0x94, 0x4B, 0xA6, 0xFB, 0x14, 0x2D, 0x04, 0x43, 0xCB, 0x8C, 0x96, 0x07, 0x4E, 0xFD, 0x44, 0x66, 0x19, 0x17, 0xBC, 0xAA, 0xBC, 0x09, 0xE5, 0x26, 0x11, 0xFD, 0xD0, 0xE5, 0x55, 0xA1, 0x6F, 0xD5, 0x24, 0x95, 0x64, 0x0D, 0xF1, 0x86, 0xFF, 0xCD, 0xD0, 0xE5, 0x83, 0x53, 0x27, 0x4B, 0x6D, 0x1C, 0xEF, 
0xA5, 0xE2, 0x7B, 0xBD, 0x5D, 0xE7, 0xDC, 0xA2, 0xFD, 0xB1, 0xEE, 0x57, 0xB2, 0x94, 0x25, 0x4A, 0x53, 0xCB, 0x95, 0x6C, 0x43, 0xBF, 0x81, 0xFD, 0xF8, 0x60, 0x8F, 0xA6, 0xF4, 0xDB, 0xCB, 0xE3, 0xCD, 0x6E, 0x1D, 0x67, 0xB9, 0x5A, 0x55, 0x94, 0x1D, 0x73, 0x0F, 0xA6, 0xD3, 0xF1, 0xF4, 0x90, 0xE8, 0xA3, 0xB6, 0x9A, 0xA5, 0x87, 0x76, 0x6F, 0x44, 0x6E, 0xAD, 0x6B, 0x7B, 0xFF, 0x1C, 0x7E, 0x53, 0x31, 0x17, 0x0C, 0xDC, 0x4A, 0x40, 0xB2, 0xE1, 0xDC, 0xAF, 0x35, 0x3F, 0x14, 0x2C, 0xE5, 0x14, 0x4E, 0x7B, 0xA7, 0xE9, 0x83, 0x3B, 0x4D, 0x67, 0xF0, 0x54, 0x1B, 0x74, 0x9B, 0xE3, 0xA0, 0x4D, 0xDB, 0x56, 0xDD, 0x1C, 0xFA, 0x9D, 0x7A, 0xB2, 0xA7, 0xAE, 0xCE, 0x5F, 0xBF, 0x63, 0x17, 0x23, 0x56, 0xF4, 0xF4, 0xFF, 0xF7, 0x78, 0x0C, 0x8E, 0x4C, 0xE1, 0x1C, 0xCE, 0x77, 0x30, 0x61, 0x2F, 0x0B, 0xE6, 0xD8, 0x29, 0x3A, 0x6C, 0x53, 0x84, 0xD6, 0x8A, 0x1B, 0x04, 0xD5, 0x4F, 0xE8, 0xB7, 0xAB, 0x32, 0xF4, 0x9B, 0x05, 0x1E, 0xBA, 0xB2, 0xEB, 0x35, 0x9A, 0x07, 0xF3, 0x5F, 0xA5, 0xB1, 0x2F, 0xCF, 0x42, 0x48, 0x0C, 0x43, 0x35, 0x1A, 0x05, 0xF3, 0x9A, 0xDB, 0x30, 0xE5, 0x2B, 0x48, 0x04, 0x35, 0x26, 0x22, 0x8E, 0x09, 0xD2, 0xAC, 0xDB, 0xB0, 0xA2, 0x85, 0x26, 0x6E, 0xB8, 0x22, 0xE2, 0x23, 0xE6, 0x05, 0xCF, 0x08, 0xE0, 0x6E, 0xCF, 0x55, 0x1A, 0x91, 0x8F, 0xB7, 0x77, 0xF7, 0xAD, 0x29, 0x1A, 0xD7, 0x7B, 0x07, 0x5D, 0x22, 0x42, 0x35, 0xA3, 0x04, 0x5F, 0x0D, 0xA5, 0xE6, 0x46, 0x15, 0xFA, 0xE5, 0x9F, 0x94, 0xCD, 0x42, 0xBF, 0x32, 0xD8, 0xD9, 0x57, 0x04, 0x41, 0x45, 0x10, 0x71, 0xA4, 0x11, 0xE0, 0x69, 0xE3, 0xDA, 0xBC, 0x39, 0xEA, 0xFB, 0x15, 0x15, 0x4B, 
0x7C, 0x78, 0x7A, 0x72, 0x8F, 0xDB, 0x2D, 0xE6, 0xE7, 0x52, 0x30, 0x99, 0xE1, 0x1B, 0x84, 0x8C, 0x89, 0x5B, 0xA1, 0xBD, 0x27, 0xCD, 0x3E, 0x2F, 0x39, 0xCE, 0x0D, 0xE0, 0xB9, 0x4E, 0x58, 0x8E, 0x0B, 0x8D, 0x21, 0x9E, 0x6B, 0x99, 0x31, 0x60, 0x7D, 0x38, 0x70, 0x7A, 0x77, 0x13, 0x0C, 0xEE, 0x6E, 0x46, 0x78, 0x8D, 0xF1, 0xBA, 0x3C, 0x23, 0xF3, 0x76, 0xD0, 0xF6, 0x6B, 0xB1, 0xB9, 0x66, 0xC6, 0x05, 0x22, 0xF3, 0x5F, 0x5E, 0xFE, 0xCD, 0x6C, 0x13, 0xE7, 0xED, 0x7A, 0xEA, 0x86, 0xD7, 0x15, 0xED, 0x02, 0x34, 0x65, 0xF5, 0x04, 0xC6, 0xB2, 0x32, 0x22, 0xC3, 0x8B, 0x61, 0xD0, 0xAB, 0xB3, 0xD3, 0xBB, 0x62, 0x5F, 0xD7, 0x21, 0x5F, 0x9E, 0x75, 0x03, 0x82, 0x59, 0x30, 0x0F, 0x14, 0xF4, 0xCB, 0xF3, 0x83, 0xA4, 0x06, 0x37, 0x65, 0x01, 0xB9, 0xC3, 0xF8, 0xC5, 0x5A, 0xE8, 0x66, 0xD7, 0xB0, 0x03, 0xC8, 0xED, 0x1E, 0x6D, 0x40, 0xA3, 0x65, 0x0B, 0xD7, 0xDD, 0x22, 0x2A, 0xBA, 0xD9, 0x6E, 0xE7, 0xF0, 0x7B, 0x95, 0x0B, 0xA7, 0x1B, 0x0A, 0x55, 0x98, 0xEF, 0xE1, 0x74, 0x34, 0x79, 0x7F, 0xD6, 0xE5, 0xEA, 0x38, 0xE9, 0x24, 0xBD, 0xD1, 0x3A, 0x1C, 0xFD, 0x2F, 0x42, 0xA9, 0x97, 0x4E, 0xC7, 0xC8, 0x5D, 0x49, 0x35, 0xDD, 0x33, 0xA6, 0x80, 0x14, 0x2D, 0x70, 0x24, 0x95, 0xC5, 0x01, 0xD9, 0x0B, 0x4F, 0xE6, 0xB7, 0xF7, 0xD7, 0xA1, 0x4F, 0x77, 0x7D, 0xF1, 0x11, 0x42, 0x3B, 0xD0, 0xBE, 0x9B, 0xE8, 0xFA, 0x40, 0x34, 0xE2, 0xD0, 0x6F, 0xCE, 0x08, 0x9E, 0x87, 0xFA, 0x0F, 0xD1, 0x7F, 0x53, 0x85, 0x94, 0x86, 0x22, 0x09, 0x00, 0x00
};

void initNetwork() {
    wifiManager.autoConnect("Eldisplay");
}


void setupMDNS(){
   if (!MDNS.begin("eldisplay")) 
   {             
     Serial.println("Error starting mDNS");
   }
}

void setHostname(){
    WiFi.setHostname("eldisplay");
}

void setupWebServer(AsyncWebServer &server) {
    _updateServer.setup(&server, "/ota", "eldisplay", "billigel");

    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
        AsyncWebServerResponse* response = request->beginResponse_P(200, "text/html", index_html_gz, sizeof(index_html_gz));
        response->addHeader("Content-Encoding", "gzip");
        request->send(response);
    });

    server.onNotFound([](AsyncWebServerRequest *request) {
        request->send(404, "text/plain", "Not found");
    });

    server.on("/config", HTTP_POST, [](AsyncWebServerRequest *request) {
        if (request->hasParam(PARAM_AREA, true)) {
            String area = request->getParam(PARAM_AREA, true)->value();
            strncpy(electricityPriceArea, area.c_str(), sizeof(electricityPriceArea) - 1);
            electricityPriceArea[sizeof(electricityPriceArea) - 1] = '\0';  // Ensure null-termination
            
            saveChar("electricityPriceArea", electricityPriceArea); // Save to Preferences
        }

        if (request->hasParam(PARAM_THRESHOLD, true)) {
            priceThreshold = request->getParam(PARAM_THRESHOLD, true)->value().toFloat();
            saveFloat("priceThreshold", priceThreshold); // Save to Preferences
        }

        shouldAddTax = request->hasParam(PARAM_TAX, true); // Simplified boolean assignment
        saveBool("shouldAddTax", shouldAddTax); // Save to Preferences
        
        request->send(200, "text/plain", "Settings updated. Restarting..."); // Respond to the client
        delay(1000); // Optional: give some time to see the message
        ESP.restart(); // Restart the ESP
    });

    server.begin(); 
}

void handleWifiStatusMessage() {
    if (WiFi.status() == WL_CONNECTED) {
        displayConnectedMessage();
    } else {
        displayConnectionFailedMessage();
    }
}