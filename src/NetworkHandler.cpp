#include "NetworkHandler.h"
#include "DisplayHandler.h"

AsyncWebServer server(80);
WiFiManager wifiManager;

const char* PARAM_AREA = "area";
const char* PARAM_THRESHOLD = "threshold";
const char* PARAM_TAX = "tax";


#define index_html_gz_len 1273
const uint8_t index_html[] PROGMEM = {  
0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9D, 0x57, 0xDD, 0x6E, 0xDB, 0x36, 0x14, 0xBE, 0x1F, 0xB0, 0x77, 0x38, 0x63, 0x50, 0xC4, 0x2E, 0x22, 0xDB, 0x72, 0xE2, 0xCE, 0x75, 0x25, 0x77, 0x45, 0x9B, 0x61, 0xBB, 0x18, 0x5A, 0x34, 0xED, 0xC5, 0x30, 0xF4, 0x82, 0x16, 0x29, 0x8B, 0x30, 0x45, 0x69, 0x24, 0xE5, 0x38, 0x2B, 0x7C, 0xB7, 0xBD, 0x49, 0xF3, 0x0A, 0x7B, 0x01, 0xBF, 0xD8, 0x48, 0xFD, 0x58, 0xB4, 0xA3, 0xB8, 0xC5, 0x90, 0x44, 0x12, 0x79, 0xC8, 0xF3, 0xF3, 0x9D, 0xEF, 0x90, 0x27, 0xC1, 0x0F, 0x6F, 0xDE, 0xBE, 0xFE, 0xF0, 0xFB, 0xBB, 0x6B, 0x48, 0x74, 0xCA, 0xE7, 0xDF, 0x7F, 0x17, 0xD8, 0x37, 0x70, 0x2C, 0x96, 0x21, 0x52, 0x6B, 0x34, 0x07, 0x3B, 0x45, 0x31, 0x31, 0x22, 0x80, 0x20, 0xA5, 0x1A, 0x43, 0x94, 0x60, 0xA9, 0xA8, 0x0E, 0xD1, 0xC7, 0x0F, 0x3F, 0x7B, 0xD3, 0x72, 0x89, 0x11, 0x69, 0xA6, 0x39, 0x9D, 0x5F, 0x73, 0xC2, 0x54, 0xCE, 0xF1, 0x5D, 0x30, 0xAC, 0x26, 0xA0, 0xDD, 0x27, 0x70, 0x4A, 0x43, 0xB4, 0x66, 0xF4, 0x36, 0xCF, 0xA4, 0x46, 0x10, 0x65, 0x42, 0x53, 0x61, 0xF4, 0xDC, 0x32, 0xA2, 0x93, 0x90, 0xD0, 0x35, 0x8B, 0xA8, 0x57, 0x0E, 0x2E, 0x80, 0x09, 0xA6, 0x19, 0xE6, 0x9E, 0x8A, 0x30, 0xA7, 0xA1, 0x3F, 0x18, 0xA1, 0xCA, 0x03, 0xA5, 0xEF, 0x8C, 0x56, 0xFB, 0x09, 0xB0, 0xC8, 0xC8, 0x1D, 0x7C, 0x86, 0x6A, 0x00, 0x10, 0x1B, 0x7D, 0x5E, 0x8C, 0x53, 0xC6, 0xEF, 0x66, 0xF0, 0x4A, 0x9A, 0xDD, 0x17, 0xA0, 0xB0, 0x50, 0x9E, 0xA2, 0x92, 0xC5, 0x2F, 0xF6, 0xEB, 0x16, 0x38, 0x5A, 0x2D, 0x65, 0x56, 0x08, 0xE2, 0x45, 0x19, 0xCF, 0xE4, 0x0C, 0xCE, 0xE2, 0x2B, 0xF3, 0xF3, 0xBC, 0x5D, 0x92, 0x62, 0xB9, 0x64, 0x62, 0x06, 0xA3, 0x76, 0x2A, 0xC7, 0x84, 0x30, 0xB1, 0x9C, 0xC1, 0x78, 0x94, 0x6F, 0x9A, 0xE9, 0x6D, 0xF5, 0x1A, 0xC4, 0x99, 0x4C, 0x1D, 0x4F, 0xBA, 0x2C, 0xC4, 0xF1, 0x57, 0x74, 0xD9, 0x78, 0x24, 0xA1, 0xD2, 0x93, 0x98, 0xB0, 0x42, 0xCD, 0xC0, 0x3F, 0x12, 0x6E, 0x3C, 0x95, 0x60, 0x92, 0xDD, 0x1A, 0xB7, 0x60, 0x9C, 0x6F, 0x60, 0x62, 0xFE, 0xE4, 0x72, 0x81, 0x7B, 0xA3, 0x0B, 0xA8, 0x7F, 0x07, 0x7E, 0xDF, 0x0D, 0x62, 0x53, 0xA1, 0x39, 0x83, 0xAB, 0xD1, 0x81, 0xAE, 0x26, 0x3C, 0x5C, 0xE8, 0xEC, 0x28, 0x94, 0xC4, 0x77, 0xE2, 0xD0, 0x74, 0xA3, 0x3D, 0xCC, 0xD9, 0xD2, 0xAC, 0x8D, 0x4C, 0xAA, 0xA8, 0x6C, 0x75, 0x34, 0x81, 0x5D, 0x5E, 0x5E, 0x1E, 0xA9, 0xE0, 0x78, 0x41, 0xB9, 0xA3, 0xA5, 0x66, 0xC4, 0x0C, 0x16, 0x3C, 0x8B, 0x56, 0xC7, 0x5E, 0x78, 0x8B, 0x4C, 0xEB, 0x2C, 0x3D, 0x0E, 0xB7, 0x4C, 0xE6, 0x2D, 0x65, 0xCB, 0x44, 0x9B, 0x8D, 0x19, 0x27, 0x0F, 0x2D, 0x4F, 0x26, 0x93, 0x23, 0xCB, 0x4C, 0xE4, 0x85, 0xFE, 0x43, 0xDF, 0xE5, 0x34, 0x3C, 0xB7, 0xBE, 0x9F, 0x7F, 0xBA, 0x80, 0x87, 0x12, 0x51, 0xA4, 0x0B, 0x2A, 0xCF, 0x3F, 0x39, 0x2E, 0xD6, 0x30, 0xF9, 0xA3, 0xD1, 0x93, 0x8E, 0x2C, 0xF9, 0x1D, 0xE0, 0xED, 0xDD, 0x3E, 0x99, 0xC2, 0xC9, 0x43, 0x99, 0x51, 0x67, 0xF2, 0xA6, 0x32, 0xCE, 0x08, 0x9C, 0x45, 0x51, 0x74, 0x22, 0x84, 0x28, 0xA1, 0xD1, 0xCA, 0xE4, 0xFD, 0xC0, 0xD5, 0xDA, 0xBC, 0xAC, 0x90, 0xF1, 0x3B, 0xC8, 0xB8, 0x28, 0x8C, 0x67, 0xC2, 0xB3, 0xE5, 0x85, 0x99, 0xA0, 0xB2, 0x2B, 0x15, 0x31, 0xA7, 0x2E, 0xD8, 0x66, 0xE4, 0x11, 0x26, 0x69, 0xA4, 0x59, 0x66, 0x73, 0x9D, 0xF1, 0x22, 0x15, 0xAD, 0x7C, 0x89, 0xF3, 0x4E, 0x53, 0xAE, 0xB3, 0xAA, 0x58, 0xA4, 0x4C, 0x1F, 0xB8, 0xFA, 0x08, 0x80, 0xDF, 0x82, 0x91, 0xC8, 0x04, 0x3D, 0x22, 0x83, 0x62, 0x7F, 0x51, 0xA3, 0xEA, 0x99, 0xBB, 0x3C, 0x2A, 0xA4, 0xB2, 0x5C, 0xC8, 0x33, 0xD6, 0xC9, 0xCE, 0xDB, 0x84, 0x69, 0x47, 0x4F, 0x47, 0x5D, 0x8E, 0xA7, 0xF8, 0xC7, 0xAB, 0x53, 0x3C, 0x6A, 0xE2, 0x9A, 0x25, 0xD9, 0xFA, 0x00, 0xCB, 0x2E, 0x65, 0xFE, 0x74, 0x7A, 0x39, 0x3D, 0xCE, 0x47, 0x91, 0x13, 0xAC, 0xA9, 0x57, 0xA5, 0xE5, 0xA4, 0x02, 0x6E, 0x93, 0xAA, 0x56, 0x77, 0x0B, 0x5E, 0xD0, 0xAF, 0xC5, 0xF2, 0x3F, 0xC0, 0x3D, 0x55, 0xCE, 0xA5, 0x8C, 0xD0, 0x28, 0x93, 0xB8, 0xE2, 0xC0, 0x61, 0x06, 0xBA, 0x6B, 0xB8, 0x33, 0xC2, 0x6F, 0x00, 0xCA, 0x9C, 0x5A, 0x3D, 0xDF, 0x7F, 0x76, 0x01, 0xFE, 0xD4, 0x3C, 0xC6, 0xA3, 0xE7, 0x7D, 0x47, 0x63, 0xAD, 0x53, 0x52, 0x73, 0xC7, 0xEC, 0x41, 0x3B, 0xA1, 0x8B, 0x92, 0x17, 0x9D, 0x48, 0x9D, 0x88, 0xBA, 0x1B, 0xC3, 0x13, 0x10, 0x9E, 0x46, 0xE9, 0xDB, 0x40, 0x72, 0x03, 0x6A, 0x30, 0x7A, 0x3C, 0x2C, 0x82, 0xE5, 0xAA, 0x0D, 0x6D, 0x0F, 0xCB, 0xF0, 0x29, 0xFC, 0x96, 0x2D, 0x18, 0xA7, 0x60, 0x2F, 0x42, 0xE3, 0x3B, 0x3C, 0x1D, 0x56, 0x92, 0x9F, 0x52, 0x4A, 0x18, 0x86, 0x9E, 0x73, 0xEA, 0x3F, 0xB3, 0xA7, 0x7E, 0xDF, 0xB1, 0x52, 0xDD, 0x97, 0x47, 0xCC, 0xD9, 0xB6, 0x55, 0x56, 0x5E, 0x62, 0xAD, 0x78, 0x72, 0x20, 0x2E, 0x6F, 0x06, 0xB7, 0x12, 0x07, 0x63, 0x9A, 0x3A, 0xF2, 0xC7, 0x0F, 0xDF, 0xEE, 0xE3, 0xB7, 0x95, 0x3E, 0x3C, 0xB1, 0xE6, 0xF0, 0xB4, 0x75, 0xFB, 0xB0, 0xFE, 0x8D, 0xCD, 0x56, 0xB0, 0xF7, 0x75, 0xEA, 0x24, 0x69, 0xEB, 0xE0, 0x1E, 0x0C, 0xDB, 0x86, 0x21, 0x50, 0x91, 0x64, 0xB9, 0xAE, 0x9B, 0x87, 0xB8, 0x10, 0xE5, 0x69, 0x67, 0xDB, 0x90, 0x98, 0xC9, 0xF4, 0xBD, 0x4D, 0x4F, 0x8F, 0xAE, 0x0D, 0x43, 0x1C, 0xC8, 0xCA, 0xF1, 0x20, 0x97, 0xE5, 0xFB, 0x0D, 0x8D, 0x71, 0xC1, 0x75, 0xAF, 0xEF, 0x10, 0x4E, 0x28, 0x0D, 0x85, 0x69, 0x30, 0x5E, 0x57, 0x5A, 0x28, 0x81, 0xB0, 0xD1, 0xD8, 0x43, 0xBB, 0xBF, 0x25, 0x90, 0x02, 0xD4, 0xEE, 0xCB, 0xCA, 0x04, 0x95, 0xEF, 0xEE, 0x01, 0x6B, 0x6D, 0x67, 0xD6, 0x8C, 0x73, 0xD8, 0xDD, 0x1B, 0x2E, 0x2A, 0xBD, 0xFB, 0xC2, 0x39, 0x06, 0x6D, 0x67, 0x62, 0xBC, 0x90, 0x6C, 0xA5, 0x98, 0xA8, 0x66, 0x85, 0x09, 0x0D, 0xCB, 0x97, 0xA8, 0xB5, 0xC7, 0x62, 0xE8, 0x1D, 0x58, 0xEB, 0xBB, 0x30, 0xDD, 0x32, 0x61, 0xDA, 0x83, 0x81, 0x21, 0x5F, 0xC9, 0xCE, 0x41, 0x22, 0x69, 0x6C, 0xDC, 0x41, 0xC3, 0x92, 0x7A, 0xA8, 0xAD, 0xE6, 0x23, 0x84, 0x1A, 0x58, 0x82, 0x61, 0xDD, 0xE9, 0x05, 0x96, 0x29, 0x15, 0x66, 0x89, 0x3F, 0xFF, 0xF5, 0xC0, 0x1D, 0xB3, 0xC8, 0x9F, 0x57, 0x74, 0x0C, 0x08, 0x5B, 0x43, 0xC4, 0xB1, 0x52, 0x21, 0xB2, 0xE4, 0x41, 0x35, 0xB4, 0x41, 0xC9, 0x24, 0x5C, 0xC2, 0x1B, 0xA2, 0x61, 0x09, 0xC7, 0x12, 0x81, 0x69, 0x02, 0x93, 0x8C, 0x84, 0xE8, 0xDD, 0xDB, 0x9B, 0x0F, 0xCD, 0x52, 0xB3, 0xB8, 0x6A, 0x17, 0xCC, 0x96, 0x10, 0x61, 0x49, 0x31, 0x32, 0x3D, 0x64, 0x2E, 0x99, 0xCA, 0x52, 0xB9, 0xBB, 0x27, 0x74, 0x16, 0x0C, 0xCB, 0x05, 0xED, 0xFA, 0x92, 0x4B, 0x50, 0x72, 0x09, 0x59, 0x9E, 0x21, 0x60, 0xA4, 0xDE, 0x5A, 0xB7, 0x98, 0xD5, 0x77, 0xCA, 0x04, 0xA7, 0x62, 0x69, 0x3A, 0x4B, 0x74, 0x89, 0x6C, 0x33, 0xE4, 0x8C, 0x24, 0xFD, 0xB3, 0x30, 0xD7, 0x1D, 0x01, 0x53, 0xAF, 0x11, 0x4D, 0x4C, 0x7B, 0x41, 0x8D, 0xF9, 0x57, 0x62, 0x49, 0x81, 0xBA, 0xD6, 0xA1, 0x77, 0x73, 0xED, 0x5F, 0xC0, 0xCD, 0xF5, 0xD8, 0x3E, 0x2E, 0xED, 0xE3, 0xAA, 0x8F, 0xE6, 0x4D, 0x35, 0x1E, 0x7A, 0xAF, 0x0D, 0xDE, 0xCA, 0xEA, 0x42, 0xF3, 0x5F, 0x76, 0xFF, 0x2E, 0x75, 0xAD, 0xEA, 0x74, 0x04, 0x55, 0x35, 0x54, 0x31, 0xB4, 0x0A, 0xEA, 0x40, 0x9C, 0x09, 0xA5, 0x69, 0x1E, 0xA2, 0xD1, 0x60, 0xE4, 0x23, 0x58, 0x63, 0x73, 0x3F, 0x84, 0xE8, 0xF3, 0xE7, 0xBD, 0x7C, 0xBB, 0x45, 0x1D, 0xA1, 0x88, 0xDD, 0x17, 0x59, 0x3B, 0x41, 0x35, 0xA8, 0x15, 0x06, 0x69, 0x98, 0x28, 0xB0, 0x32, 0xED, 0x47, 0x0A, 0x89, 0xF5, 0xF1, 0xD1, 0x58, 0xF0, 0xA6, 0x4D, 0xD1, 0x91, 0xCB, 0x4D, 0x5B, 0x52, 0x3B, 0x6D, 0x56, 0x36, 0xEE, 0xDA, 0x4F, 0xE3, 0x15, 0xDE, 0x6C, 0xB7, 0x73, 0x78, 0x5F, 0xDA, 0x32, 0xA5, 0x0F, 0x69, 0x96, 0xAA, 0x97, 0xD0, 0x1B, 0x4F, 0x9E, 0xF4, 0xF7, 0xB6, 0xF6, 0x98, 0xEC, 0x67, 0x1C, 0x32, 0x1D, 0x9F, 0x07, 0x8F, 0xBA, 0x52, 0x5D, 0xCE, 0x7B, 0x44, 0x6E, 0x72, 0x2C, 0xF1, 0xC1, 0x62, 0x0C, 0xB6, 0x08, 0x0C, 0x09, 0xAB, 0x2B, 0x0A, 0x35, 0x16, 0x0E, 0x6E, 0x2C, 0x34, 0xFF, 0x98, 0x97, 0x63, 0x89, 0x83, 0x21, 0xEE, 0xDA, 0x7E, 0xB6, 0xDF, 0xE8, 0x9E, 0xE2, 0x08, 0x32, 0x11, 0x71, 0x16, 0xAD, 0x0C, 0x26, 0x0F, 0x0F, 0x11, 0x34, 0xDF, 0xFD, 0xB3, 0x2F, 0xF0, 0x13, 0xF5, 0xED, 0x9A, 0x0C, 0x86, 0x06, 0x85, 0xA6, 0x8A, 0x86, 0xB6, 0x8C, 0xAA, 0x2A, 0xAC, 0xA7, 0x83, 0x61, 0x5D, 0x98, 0xA6, 0x08, 0xAB, 0x7F, 0xD7, 0xFE, 0x03, 0xE2, 0xF6, 0xEC, 0x29, 0xC0, 0x0D, 0x00, 0x00};



void initNetwork() {
    wifiManager.setConnectTimeout(120);
    wifiManager.setAPCallback(handleWifiStatusMessage);
    wifiManager.autoConnect("Eldisplay");
    delay(2000);
    if (!MDNS.begin("eldisplay")) 
   {             
     Serial.println("Error starting mDNS");
   }
   WiFi.setHostname("eldisplay");
   clearDisplay();
}

void setupWebServer(AsyncWebServer &server) {

    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
        AsyncWebServerResponse* response = request->beginResponse_P(200, "text/html", index_html, index_html_gz_len);
        response->addHeader("Content-Encoding", "gzip");
        request->send(response);
    });

    server.onNotFound([](AsyncWebServerRequest *request) {
        request->send(404, "text/plain", "Not found");
    });

    server.on("/config", HTTP_POST, [](AsyncWebServerRequest *request) {
        if (request->hasParam(PARAM_AREA, true)) {
            String area = request->getParam(PARAM_AREA, true)->value();
            strncpy(electricityPriceArea, area.c_str(), sizeof(electricityPriceArea) - 1);
            electricityPriceArea[sizeof(electricityPriceArea) - 1] = '\0';  // Ensure null-termination
            
            saveChar("electricityPriceArea", electricityPriceArea); // Save to Preferences
        }

        if (request->hasParam(PARAM_THRESHOLD, true)) {
            priceThreshold = request->getParam(PARAM_THRESHOLD, true)->value().toFloat();
            saveFloat("priceThreshold", priceThreshold); // Save to Preferences
        }

        shouldAddTax = request->hasParam(PARAM_TAX, true); 
        saveBool("shouldAddTax", shouldAddTax); // Save to Preferences
        
        request->send(200, "text/plain", "Settings updated. Restarting..."); 
        delay(1000); 
        ESP.restart(); 
    });


    server.on("/reset", HTTP_GET, [](AsyncWebServerRequest *request){
        AsyncWebServerResponse* response = request->beginResponse_P(200, "text/plain", "Reseting, device is Restarting...");
                request->send(response);
        delay(10000);
        resetDevice();
        
    });

    ElegantOTA.begin(&server);
    server.begin(); 
}

void handleWifiStatusMessage(WiFiManager *myWiFiManager) {
    if (WiFi.status() == WL_CONNECTED) {
        displayConnectedMessage();
    } else {
        displayConnectionFailedMessage();
    }
}


void loopOTA(){
    ElegantOTA.loop();
}

void resetDevice(){
    clearPreferences();
    delay(1000);
    wifiManager.resetSettings();
    delay(1000);
    ESP.restart();
}